// fix-database.js
const mysql = require('mysql2/promise');
require('dotenv').config();

async function fixDatabase() {
  let connection;
  
  try {
    // Connexion √† la base de donn√©es
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'gestion_projets_nodejs',
      port: process.env.DB_PORT || 3306,
    });

    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');

    // 1. V√©rifier et corriger les statuts de projet
    console.log('\nüîç V√©rification des statuts de projet...');
    const [statuses] = await connection.execute('SELECT * FROM statuts_projet');
    
    if (statuses.length === 0) {
      console.log('‚ùå Aucun statut de projet trouv√©. Insertion...');
      await connection.execute(`
        INSERT INTO statuts_projet (nom, couleur, ordre) VALUES
        ('Planification', '#FFA500', 1),
        ('En cours', '#0066CC', 2),
        ('En pause', '#FF6B6B', 3),
        ('Termin√©', '#4CAF50', 4),
        ('Annul√©', '#9E9E9E', 5)
      `);
      console.log('‚úÖ Statuts de projet cr√©√©s');
    } else {
      console.log(`‚úÖ ${statuses.length} statuts de projet trouv√©s`);
      statuses.forEach(status => {
        console.log(`   - ${status.nom} (${status.couleur})`);
      });
    }

    // 2. V√©rifier les directions
    console.log('\nüîç V√©rification des directions...');
    const [directions] = await connection.execute('SELECT * FROM directions');
    console.log(`‚úÖ ${directions.length} directions trouv√©es`);
    
    if (directions.length === 0) {
      console.log('‚ùå Aucune direction trouv√©e. Insertion...');
      await connection.execute(`
        INSERT INTO directions (nom, description) VALUES
        ('DSI', 'Direction des Syst√®mes d''Information'),
        ('Marketing', 'Direction Marketing et Communication'),
        ('Finance', 'Direction Financi√®re'),
        ('RH', 'Ressources Humaines'),
        ('Commercial', 'Direction Commerciale'),
        ('Production', 'Direction de la Production')
      `);
      console.log('‚úÖ Directions cr√©√©es');
    }

    // 3. V√©rifier les utilisateurs
    console.log('\nüîç V√©rification des utilisateurs...');
    const [users] = await connection.execute(`
      SELECT u.id, u.nom, u.email, r.nom as role_nom 
      FROM utilisateurs u 
      LEFT JOIN roles r ON u.role_id = r.id
    `);
    console.log(`‚úÖ ${users.length} utilisateurs trouv√©s`);
    users.forEach(user => {
      console.log(`   - ${user.nom} (${user.email}) - ${user.role_nom}`);
    });

    // 4. V√©rifier les projets existants
    console.log('\nüîç V√©rification des projets...');
    const [projects] = await connection.execute(`
      SELECT p.*, u.nom as chef_nom, d.nom as direction_nom, s.nom as statut_nom
      FROM projets p
      LEFT JOIN utilisateurs u ON p.chef_projet_id = u.id
      LEFT JOIN directions d ON p.direction_id = d.id
      LEFT JOIN statuts_projet s ON p.statut_id = s.id
      ORDER BY p.created_at DESC
    `);
    
    console.log(`‚úÖ ${projects.length} projets trouv√©s`);
    if (projects.length > 0) {
      projects.forEach(project => {
        console.log(`   - "${project.nom}" par ${project.chef_nom} (${project.statut_nom})`);
      });
    } else {
      console.log('üí° Aucun projet trouv√©. Cr√©ation d\'un projet de test...');
      
      // Cr√©er un projet de test
      const adminUser = users.find(u => u.role_nom === 'Administrateur fonctionnel');
      const dsiDirection = await connection.execute('SELECT id FROM directions WHERE nom = "DSI"');
      const enCoursStatus = await connection.execute('SELECT id FROM statuts_projet WHERE nom = "En cours"');
      
      if (adminUser && dsiDirection[0].length > 0 && enCoursStatus[0].length > 0) {
        await connection.execute(`
          INSERT INTO projets (nom, description, chef_projet_id, direction_id, statut_id, pourcentage_avancement, priorite) 
          VALUES (?, ?, ?, ?, ?, 0, 'Normale')
        `, [
          'Projet de Test',
          'Projet cr√©√© automatiquement pour tester le syst√®me',
          adminUser.id,
          dsiDirection[0][0].id,
          enCoursStatus[0][0].id
        ]);
        console.log('‚úÖ Projet de test cr√©√©');
      }
    }

    // 5. Test de cr√©ation manuelle d'un projet
    console.log('\nüß™ Test de cr√©ation d\'un projet...');
    try {
      const adminUser = users.find(u => u.role_nom === 'Administrateur fonctionnel');
      const [dirs] = await connection.execute('SELECT * FROM directions LIMIT 1');
      const [stats] = await connection.execute('SELECT * FROM statuts_projet LIMIT 1');
      
      if (adminUser && dirs.length > 0 && stats.length > 0) {
        const [result] = await connection.execute(`
          INSERT INTO projets (nom, description, chef_projet_id, direction_id, statut_id, pourcentage_avancement, priorite, created_at) 
          VALUES (?, ?, ?, ?, ?, 0, 'Normale', NOW())
        `, [
          `Test Manuel ${new Date().getTime()}`,
          'Projet cr√©√© par le script de test',
          adminUser.id,
          dirs[0].id,
          stats[0].id
        ]);
        
        console.log(`‚úÖ Projet test cr√©√© avec ID: ${result.insertId}`);
        
        // V√©rifier imm√©diatement
        const [verification] = await connection.execute(
          'SELECT * FROM projets WHERE id = ?', 
          [result.insertId]
        );
        console.log('‚úÖ V√©rification:', verification[0]);
      } else {
        console.log('‚ùå Impossible de cr√©er un projet de test - donn√©es manquantes');
      }
    } catch (testError) {
      console.error('‚ùå Erreur lors du test de cr√©ation:', testError.message);
    }

    console.log('\nüéâ V√©rification termin√©e !');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå Connexion ferm√©e');
    }
  }
}

// Ex√©cuter le script
fixDatabase();