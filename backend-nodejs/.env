DB_HOST=localhost
DB_USER=root
DB_PASSWORD=
DB_NAME=gestion_projets_nodejs
DB_PORT=3306

# JWT Configuration
JWT_SECRET=votre_secret_jwt_super_secret_123456789_changez_moi
JWT_EXPIRES_IN=7d

# Serveur
PORT=5000
NODE_ENV=development

# CORS - URL de votre frontend
FRONTEND_URL=http://localhost:3000

# Scripts de test API (créez le fichier test-api.js)
/*
// test-api.js
const axios = require('axios');

const API_BASE = 'http://localhost:5000/api';

// Test de l'API
async function testAPI() {
  try {
    console.log('🧪 TESTS DE L\'API');
    console.log('='.repeat(40));

    // 1. Test de santé
    console.log('1. Test de santé...');
    const health = await axios.get(`${API_BASE}/health`);
    console.log('✅ Santé:', health.data.message);

    // 2. Test de connexion
    console.log('\n2. Test de connexion...');
    const login = await axios.post(`${API_BASE}/auth/login`, {
      email: 'admin@entreprise.fr',
      password: 'admin123'
    });
    console.log('✅ Connexion réussie:', login.data.user.nom);
    
    const token = login.data.token;
    const headers = { Authorization: `Bearer ${token}` };

    // 3. Test récupération des utilisateurs
    console.log('\n3. Test récupération utilisateurs...');
    const users = await axios.get(`${API_BASE}/users`, { headers });
    console.log(`✅ ${users.data.count} utilisateurs trouvés`);

    // 4. Test récupération des projets
    console.log('\n4. Test récupération projets...');
    const projects = await axios.get(`${API_BASE}/projects`, { headers });
    console.log(`✅ ${projects.data.count} projets trouvés`);

    // 5. Test références
    console.log('\n5. Test références...');
    const directions = await axios.get(`${API_BASE}/reference/directions`, { headers });
    console.log(`✅ ${directions.data.data.length} directions trouvées`);

    console.log('\n🎉 TOUS LES TESTS SONT PASSÉS !');

  } catch (error) {
    console.error('❌ Erreur de test:', error.response?.data || error.message);
  }
}

// Installer axios pour les tests : npm install --save-dev axios
// Exécuter : node test-api.js
testAPI();
*/

# .gitignore (créez ce fichier)
# Dépendances
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Variables d'environnement
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs
*.log

# Fichiers temporaires
.tmp/
.cache/

# Fichiers de l'OS
.DS_Store
Thumbs.db

# IDE
.vscode/
.idea/
*.swp
*.swo

# Scripts de démarrage rapide (créez start.sh)
#!/bin/bash
echo "🚀 Démarrage du backend Node.js..."

# Vérifier si XAMPP est démarré
if ! pgrep -x "mysqld" > /dev/null; then
    echo "❌ MySQL n'est pas démarré. Démarrez XAMPP d'abord."
    exit 1
fi

# Installer les dépendances si nécessaire
if [ ! -d "node_modules" ]; then
    echo "📦 Installation des dépendances..."
    npm install
fi

# Démarrer le serveur
echo "🔥 Démarrage du serveur..."
npm run dev

# Scripts PowerShell pour Windows (créez start.ps1)
<#
Write-Host "🚀 Démarrage du backend Node.js..." -ForegroundColor Green

# Vérifier si MySQL est démarré
$mysqlProcess = Get-Process -Name "mysqld" -ErrorAction SilentlyContinue
if (-not $mysqlProcess) {
    Write-Host "❌ MySQL n'est pas démarré. Démarrez XAMPP d'abord." -ForegroundColor Red
    exit 1
}

# Installer les dépendances si nécessaire
if (-not (Test-Path "node_modules")) {
    Write-Host "📦 Installation des dépendances..." -ForegroundColor Yellow
    npm install
}

# Démarrer le serveur
Write-Host "🔥 Démarrage du serveur..." -ForegroundColor Cyan
npm run dev
#>